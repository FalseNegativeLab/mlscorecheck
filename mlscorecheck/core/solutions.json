{
    "solutions": [
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "accuracy",
                        "abbreviation": "acc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "err",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "(tp + tn)/(p + n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(tp + tn)/(p + n)"
                    },
                    "expression": "(tn + tp)/(n + p)",
                    "equation": "acc - (tn + tp)/(n + p)",
                    "equation_polynomial": "acc*(n + p) - tn - tp",
                    "function": "accuracy_standardized"
                },
                {
                    "descriptor": {
                        "name": "sensitivity",
                        "abbreviation": "sens",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fnr",
                        "args": [
                            "tp",
                            "p"
                        ],
                        "formula": "tp/p",
                        "args_standardized": [
                            "tp",
                            "p"
                        ],
                        "formula_standardized": "tp/p",
                        "synonyms": [
                            "recall",
                            "true_positive_rate"
                        ]
                    },
                    "expression": "tp/p",
                    "equation": "sens - tp/p",
                    "equation_polynomial": "p*sens - tp",
                    "function": "sensitivity_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "p*sens",
                            "tn": "acc*n + acc*p - p*sens"
                        },
                        "symbols": {
                            "tp": [
                                "sens",
                                "p"
                            ],
                            "tn": [
                                "sens",
                                "p",
                                "n",
                                "acc"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "accuracy",
                        "abbreviation": "acc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "err",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "(tp + tn)/(p + n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(tp + tn)/(p + n)"
                    },
                    "expression": "(tn + tp)/(n + p)",
                    "equation": "acc - (tn + tp)/(n + p)",
                    "equation_polynomial": "acc*(n + p) - tn - tp",
                    "function": "accuracy_standardized"
                },
                {
                    "descriptor": {
                        "name": "specificity",
                        "abbreviation": "spec",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fpr",
                        "args": [
                            "tn",
                            "n"
                        ],
                        "formula": "tn/n",
                        "args_standardized": [
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tn/n",
                        "synonyms": [
                            "selectivity",
                            "true_negative_rate"
                        ]
                    },
                    "expression": "tn/n",
                    "equation": "spec - tn/n",
                    "equation_polynomial": "n*spec - tn",
                    "function": "specificity_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tn": "n*spec",
                            "tp": "acc*n + acc*p - n*spec"
                        },
                        "symbols": {
                            "tn": [
                                "spec",
                                "n"
                            ],
                            "tp": [
                                "p",
                                "spec",
                                "n",
                                "acc"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "accuracy",
                        "abbreviation": "acc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "err",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "(tp + tn)/(p + n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(tp + tn)/(p + n)"
                    },
                    "expression": "(tn + tp)/(n + p)",
                    "equation": "acc - (tn + tp)/(n + p)",
                    "equation_polynomial": "acc*(n + p) - tn - tp",
                    "function": "accuracy_standardized"
                },
                {
                    "descriptor": {
                        "name": "positive_predictive_value",
                        "abbreviation": "ppv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tp": 0,
                                "fp": 0
                            }
                        ],
                        "complement": "fdr",
                        "args": [
                            "tp",
                            "fp"
                        ],
                        "formula": "tp/(tp + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tp/(tp + n - tn)",
                        "synonyms": [
                            "precision"
                        ]
                    },
                    "expression": "tp/(n - tn + tp)",
                    "equation": "ppv - tp/(n - tn + tp)",
                    "equation_polynomial": "ppv*(n - tn + tp) - tp",
                    "function": "positive_predictive_value_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "ppv*(acc*n + acc*p - n)/(2*ppv - 1)",
                            "tn": "(acc*n*ppv - acc*n + acc*p*ppv - acc*p + n*ppv)/(2*ppv - 1)"
                        },
                        "symbols": {
                            "tp": [
                                "n",
                                "ppv",
                                "p",
                                "acc"
                            ],
                            "tn": [
                                "ppv",
                                "p",
                                "n",
                                "acc"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "2*ppv - 1",
                            "symbols": [
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "accuracy",
                        "abbreviation": "acc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "err",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "(tp + tn)/(p + n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(tp + tn)/(p + n)"
                    },
                    "expression": "(tn + tp)/(n + p)",
                    "equation": "acc - (tn + tp)/(n + p)",
                    "equation_polynomial": "acc*(n + p) - tn - tp",
                    "function": "accuracy_standardized"
                },
                {
                    "descriptor": {
                        "name": "negative_predictive_value",
                        "abbreviation": "npv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tn": 0,
                                "fn": 0
                            }
                        ],
                        "complement": "for_",
                        "args": [
                            "tn",
                            "fn"
                        ],
                        "formula": "tn/(tn + fn)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p"
                        ],
                        "formula_standardized": "tn/(tn + p - tp)"
                    },
                    "expression": "tn/(p + tn - tp)",
                    "equation": "npv - tn/(p + tn - tp)",
                    "equation_polynomial": "npv*(p + tn - tp) - tn",
                    "function": "negative_predictive_value_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "(acc*(n + p)*(2*npv - 1) - npv*(acc*n + acc*p - p))/(2*npv - 1)",
                            "tn": "npv*(acc*n + acc*p - p)/(2*npv - 1)"
                        },
                        "symbols": {
                            "tp": [
                                "p",
                                "acc",
                                "n",
                                "npv"
                            ],
                            "tn": [
                                "n",
                                "npv",
                                "p",
                                "acc"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "2*npv - 1",
                            "symbols": [
                                "npv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "accuracy",
                        "abbreviation": "acc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "err",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "(tp + tn)/(p + n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(tp + tn)/(p + n)"
                    },
                    "expression": "(tn + tp)/(n + p)",
                    "equation": "acc - (tn + tp)/(n + p)",
                    "equation_polynomial": "acc*(n + p) - tn - tp",
                    "function": "accuracy_standardized"
                },
                {
                    "descriptor": {
                        "name": "balanced_accuracy",
                        "abbreviation": "bacc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "short_args": [
                            "tpr",
                            "tnr"
                        ],
                        "short_formula": "(tpr + tnr)/2",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "tp/(2*p) + tn/(2*n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "tp/(2*p) + tn/(2*n)"
                    },
                    "expression": "tp/(2*p) + tn/(2*n)",
                    "equation": "bacc - tp/(2*p) - tn/(2*n)",
                    "equation_polynomial": "2*bacc*n*p - n*tp - p*tn",
                    "function": "balanced_accuracy_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "p*(acc*n + acc*p - 2*bacc*n)/(-n + p)",
                            "tn": "n*(acc*n + acc*p - 2*bacc*p)/(n - p)"
                        },
                        "symbols": {
                            "tp": [
                                "bacc",
                                "p",
                                "acc",
                                "n"
                            ],
                            "tn": [
                                "bacc",
                                "p",
                                "acc",
                                "n"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "n - p",
                            "symbols": [
                                "n",
                                "p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "accuracy",
                        "abbreviation": "acc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "err",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "(tp + tn)/(p + n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(tp + tn)/(p + n)"
                    },
                    "expression": "(tn + tp)/(n + p)",
                    "equation": "acc - (tn + tp)/(n + p)",
                    "equation_polynomial": "acc*(n + p) - tn - tp",
                    "function": "accuracy_standardized"
                },
                {
                    "descriptor": {
                        "name": "f1_plus",
                        "abbreviation": "f1p",
                        "lower_bound": 0,
                        "upper_bound": null,
                        "args": [
                            "tp",
                            "fp",
                            "p"
                        ],
                        "formula": "(2*tp) / (tp + p + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(2*tp) / (tp + p + n - tn)",
                        "synonyms": [
                            "f1"
                        ]
                    },
                    "expression": "2*tp/(n + p - tn + tp)",
                    "equation": "f1p - 2*tp/(n + p - tn + tp)",
                    "equation_polynomial": "f1p*(n + p - tn + tp) - 2*tp",
                    "function": "f1_plus_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "f1p*(acc*n + acc*p - n - p)/(2*(f1p - 1))",
                            "tn": "(acc*f1p*n + acc*f1p*p - 2*acc*n - 2*acc*p + f1p*n + f1p*p)/(2*(f1p - 1))"
                        },
                        "symbols": {
                            "tp": [
                                "acc",
                                "p",
                                "f1p",
                                "n"
                            ],
                            "tn": [
                                "p",
                                "f1p",
                                "n",
                                "acc"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "2*f1p - 2",
                            "symbols": [
                                "f1p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "sensitivity",
                        "abbreviation": "sens",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fnr",
                        "args": [
                            "tp",
                            "p"
                        ],
                        "formula": "tp/p",
                        "args_standardized": [
                            "tp",
                            "p"
                        ],
                        "formula_standardized": "tp/p",
                        "synonyms": [
                            "recall",
                            "true_positive_rate"
                        ]
                    },
                    "expression": "tp/p",
                    "equation": "sens - tp/p",
                    "equation_polynomial": "p*sens - tp",
                    "function": "sensitivity_standardized"
                },
                {
                    "descriptor": {
                        "name": "specificity",
                        "abbreviation": "spec",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fpr",
                        "args": [
                            "tn",
                            "n"
                        ],
                        "formula": "tn/n",
                        "args_standardized": [
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tn/n",
                        "synonyms": [
                            "selectivity",
                            "true_negative_rate"
                        ]
                    },
                    "expression": "tn/n",
                    "equation": "spec - tn/n",
                    "equation_polynomial": "n*spec - tn",
                    "function": "specificity_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "p*sens",
                            "tn": "n*spec"
                        },
                        "symbols": {
                            "tp": [
                                "sens",
                                "p"
                            ],
                            "tn": [
                                "spec",
                                "n"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "sensitivity",
                        "abbreviation": "sens",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fnr",
                        "args": [
                            "tp",
                            "p"
                        ],
                        "formula": "tp/p",
                        "args_standardized": [
                            "tp",
                            "p"
                        ],
                        "formula_standardized": "tp/p",
                        "synonyms": [
                            "recall",
                            "true_positive_rate"
                        ]
                    },
                    "expression": "tp/p",
                    "equation": "sens - tp/p",
                    "equation_polynomial": "p*sens - tp",
                    "function": "sensitivity_standardized"
                },
                {
                    "descriptor": {
                        "name": "positive_predictive_value",
                        "abbreviation": "ppv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tp": 0,
                                "fp": 0
                            }
                        ],
                        "complement": "fdr",
                        "args": [
                            "tp",
                            "fp"
                        ],
                        "formula": "tp/(tp + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tp/(tp + n - tn)",
                        "synonyms": [
                            "precision"
                        ]
                    },
                    "expression": "tp/(n - tn + tp)",
                    "equation": "ppv - tp/(n - tn + tp)",
                    "equation_polynomial": "ppv*(n - tn + tp) - tp",
                    "function": "positive_predictive_value_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "p*sens",
                            "tn": "n + p*sens - p*sens/ppv"
                        },
                        "symbols": {
                            "tp": [
                                "sens",
                                "p"
                            ],
                            "tn": [
                                "sens",
                                "ppv",
                                "p",
                                "n"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "ppv",
                            "symbols": [
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "sensitivity",
                        "abbreviation": "sens",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fnr",
                        "args": [
                            "tp",
                            "p"
                        ],
                        "formula": "tp/p",
                        "args_standardized": [
                            "tp",
                            "p"
                        ],
                        "formula_standardized": "tp/p",
                        "synonyms": [
                            "recall",
                            "true_positive_rate"
                        ]
                    },
                    "expression": "tp/p",
                    "equation": "sens - tp/p",
                    "equation_polynomial": "p*sens - tp",
                    "function": "sensitivity_standardized"
                },
                {
                    "descriptor": {
                        "name": "negative_predictive_value",
                        "abbreviation": "npv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tn": 0,
                                "fn": 0
                            }
                        ],
                        "complement": "for_",
                        "args": [
                            "tn",
                            "fn"
                        ],
                        "formula": "tn/(tn + fn)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p"
                        ],
                        "formula_standardized": "tn/(tn + p - tp)"
                    },
                    "expression": "tn/(p + tn - tp)",
                    "equation": "npv - tn/(p + tn - tp)",
                    "equation_polynomial": "npv*(p + tn - tp) - tn",
                    "function": "negative_predictive_value_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "p*sens",
                            "tn": "npv*p*(sens - 1)/(npv - 1)"
                        },
                        "symbols": {
                            "tp": [
                                "sens",
                                "p"
                            ],
                            "tn": [
                                "npv",
                                "sens",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "npv - 1",
                            "symbols": [
                                "npv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "sensitivity",
                        "abbreviation": "sens",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fnr",
                        "args": [
                            "tp",
                            "p"
                        ],
                        "formula": "tp/p",
                        "args_standardized": [
                            "tp",
                            "p"
                        ],
                        "formula_standardized": "tp/p",
                        "synonyms": [
                            "recall",
                            "true_positive_rate"
                        ]
                    },
                    "expression": "tp/p",
                    "equation": "sens - tp/p",
                    "equation_polynomial": "p*sens - tp",
                    "function": "sensitivity_standardized"
                },
                {
                    "descriptor": {
                        "name": "balanced_accuracy",
                        "abbreviation": "bacc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "short_args": [
                            "tpr",
                            "tnr"
                        ],
                        "short_formula": "(tpr + tnr)/2",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "tp/(2*p) + tn/(2*n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "tp/(2*p) + tn/(2*n)"
                    },
                    "expression": "tp/(2*p) + tn/(2*n)",
                    "equation": "bacc - tp/(2*p) - tn/(2*n)",
                    "equation_polynomial": "2*bacc*n*p - n*tp - p*tn",
                    "function": "balanced_accuracy_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "p*sens",
                            "tn": "n*(2*bacc - sens)"
                        },
                        "symbols": {
                            "tp": [
                                "sens",
                                "p"
                            ],
                            "tn": [
                                "n",
                                "sens",
                                "bacc"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "sensitivity",
                        "abbreviation": "sens",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fnr",
                        "args": [
                            "tp",
                            "p"
                        ],
                        "formula": "tp/p",
                        "args_standardized": [
                            "tp",
                            "p"
                        ],
                        "formula_standardized": "tp/p",
                        "synonyms": [
                            "recall",
                            "true_positive_rate"
                        ]
                    },
                    "expression": "tp/p",
                    "equation": "sens - tp/p",
                    "equation_polynomial": "p*sens - tp",
                    "function": "sensitivity_standardized"
                },
                {
                    "descriptor": {
                        "name": "f1_plus",
                        "abbreviation": "f1p",
                        "lower_bound": 0,
                        "upper_bound": null,
                        "args": [
                            "tp",
                            "fp",
                            "p"
                        ],
                        "formula": "(2*tp) / (tp + p + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(2*tp) / (tp + p + n - tn)",
                        "synonyms": [
                            "f1"
                        ]
                    },
                    "expression": "2*tp/(n + p - tn + tp)",
                    "equation": "f1p - 2*tp/(n + p - tn + tp)",
                    "equation_polynomial": "f1p*(n + p - tn + tp) - 2*tp",
                    "function": "f1_plus_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "p*sens",
                            "tn": "n + p*sens + p - 2*p*sens/f1p"
                        },
                        "symbols": {
                            "tp": [
                                "sens",
                                "p"
                            ],
                            "tn": [
                                "sens",
                                "p",
                                "f1p",
                                "n"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p",
                            "symbols": [
                                "f1p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "specificity",
                        "abbreviation": "spec",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fpr",
                        "args": [
                            "tn",
                            "n"
                        ],
                        "formula": "tn/n",
                        "args_standardized": [
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tn/n",
                        "synonyms": [
                            "selectivity",
                            "true_negative_rate"
                        ]
                    },
                    "expression": "tn/n",
                    "equation": "spec - tn/n",
                    "equation_polynomial": "n*spec - tn",
                    "function": "specificity_standardized"
                },
                {
                    "descriptor": {
                        "name": "positive_predictive_value",
                        "abbreviation": "ppv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tp": 0,
                                "fp": 0
                            }
                        ],
                        "complement": "fdr",
                        "args": [
                            "tp",
                            "fp"
                        ],
                        "formula": "tp/(tp + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tp/(tp + n - tn)",
                        "synonyms": [
                            "precision"
                        ]
                    },
                    "expression": "tp/(n - tn + tp)",
                    "equation": "ppv - tp/(n - tn + tp)",
                    "equation_polynomial": "ppv*(n - tn + tp) - tp",
                    "function": "positive_predictive_value_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tn": "n*spec",
                            "tp": "n*ppv*(spec - 1)/(ppv - 1)"
                        },
                        "symbols": {
                            "tn": [
                                "spec",
                                "n"
                            ],
                            "tp": [
                                "n",
                                "ppv",
                                "spec"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "ppv - 1",
                            "symbols": [
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "specificity",
                        "abbreviation": "spec",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fpr",
                        "args": [
                            "tn",
                            "n"
                        ],
                        "formula": "tn/n",
                        "args_standardized": [
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tn/n",
                        "synonyms": [
                            "selectivity",
                            "true_negative_rate"
                        ]
                    },
                    "expression": "tn/n",
                    "equation": "spec - tn/n",
                    "equation_polynomial": "n*spec - tn",
                    "function": "specificity_standardized"
                },
                {
                    "descriptor": {
                        "name": "negative_predictive_value",
                        "abbreviation": "npv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tn": 0,
                                "fn": 0
                            }
                        ],
                        "complement": "for_",
                        "args": [
                            "tn",
                            "fn"
                        ],
                        "formula": "tn/(tn + fn)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p"
                        ],
                        "formula_standardized": "tn/(tn + p - tp)"
                    },
                    "expression": "tn/(p + tn - tp)",
                    "equation": "npv - tn/(p + tn - tp)",
                    "equation_polynomial": "npv*(p + tn - tp) - tn",
                    "function": "negative_predictive_value_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tn": "n*spec",
                            "tp": "n*spec - n*spec/npv + p"
                        },
                        "symbols": {
                            "tn": [
                                "spec",
                                "n"
                            ],
                            "tp": [
                                "p",
                                "n",
                                "spec",
                                "npv"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "npv",
                            "symbols": [
                                "npv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "specificity",
                        "abbreviation": "spec",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fpr",
                        "args": [
                            "tn",
                            "n"
                        ],
                        "formula": "tn/n",
                        "args_standardized": [
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tn/n",
                        "synonyms": [
                            "selectivity",
                            "true_negative_rate"
                        ]
                    },
                    "expression": "tn/n",
                    "equation": "spec - tn/n",
                    "equation_polynomial": "n*spec - tn",
                    "function": "specificity_standardized"
                },
                {
                    "descriptor": {
                        "name": "balanced_accuracy",
                        "abbreviation": "bacc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "short_args": [
                            "tpr",
                            "tnr"
                        ],
                        "short_formula": "(tpr + tnr)/2",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "tp/(2*p) + tn/(2*n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "tp/(2*p) + tn/(2*n)"
                    },
                    "expression": "tp/(2*p) + tn/(2*n)",
                    "equation": "bacc - tp/(2*p) - tn/(2*n)",
                    "equation_polynomial": "2*bacc*n*p - n*tp - p*tn",
                    "function": "balanced_accuracy_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tn": "n*spec",
                            "tp": "p*(2*bacc - spec)"
                        },
                        "symbols": {
                            "tn": [
                                "spec",
                                "n"
                            ],
                            "tp": [
                                "spec",
                                "bacc",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "specificity",
                        "abbreviation": "spec",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": null,
                        "complement": "fpr",
                        "args": [
                            "tn",
                            "n"
                        ],
                        "formula": "tn/n",
                        "args_standardized": [
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tn/n",
                        "synonyms": [
                            "selectivity",
                            "true_negative_rate"
                        ]
                    },
                    "expression": "tn/n",
                    "equation": "spec - tn/n",
                    "equation_polynomial": "n*spec - tn",
                    "function": "specificity_standardized"
                },
                {
                    "descriptor": {
                        "name": "f1_plus",
                        "abbreviation": "f1p",
                        "lower_bound": 0,
                        "upper_bound": null,
                        "args": [
                            "tp",
                            "fp",
                            "p"
                        ],
                        "formula": "(2*tp) / (tp + p + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(2*tp) / (tp + p + n - tn)",
                        "synonyms": [
                            "f1"
                        ]
                    },
                    "expression": "2*tp/(n + p - tn + tp)",
                    "equation": "f1p - 2*tp/(n + p - tn + tp)",
                    "equation_polynomial": "f1p*(n + p - tn + tp) - 2*tp",
                    "function": "f1_plus_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tn": "n*spec",
                            "tp": "f1p*(n*spec - n - p)/(f1p - 2)"
                        },
                        "symbols": {
                            "tn": [
                                "spec",
                                "n"
                            ],
                            "tp": [
                                "n",
                                "spec",
                                "p",
                                "f1p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p - 2",
                            "symbols": [
                                "f1p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "positive_predictive_value",
                        "abbreviation": "ppv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tp": 0,
                                "fp": 0
                            }
                        ],
                        "complement": "fdr",
                        "args": [
                            "tp",
                            "fp"
                        ],
                        "formula": "tp/(tp + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tp/(tp + n - tn)",
                        "synonyms": [
                            "precision"
                        ]
                    },
                    "expression": "tp/(n - tn + tp)",
                    "equation": "ppv - tp/(n - tn + tp)",
                    "equation_polynomial": "ppv*(n - tn + tp) - tp",
                    "function": "positive_predictive_value_standardized"
                },
                {
                    "descriptor": {
                        "name": "negative_predictive_value",
                        "abbreviation": "npv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tn": 0,
                                "fn": 0
                            }
                        ],
                        "complement": "for_",
                        "args": [
                            "tn",
                            "fn"
                        ],
                        "formula": "tn/(tn + fn)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p"
                        ],
                        "formula_standardized": "tn/(tn + p - tp)"
                    },
                    "expression": "tn/(p + tn - tp)",
                    "equation": "npv - tn/(p + tn - tp)",
                    "equation_polynomial": "npv*(p + tn - tp) - tn",
                    "function": "negative_predictive_value_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "ppv*(n*npv - n + npv*p)/(npv + ppv - 1)",
                            "tn": "npv*(n*ppv + p*ppv - p)/(npv + ppv - 1)"
                        },
                        "symbols": {
                            "tp": [
                                "ppv",
                                "p",
                                "n",
                                "npv"
                            ],
                            "tn": [
                                "ppv",
                                "p",
                                "n",
                                "npv"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "npv + ppv - 1",
                            "symbols": [
                                "npv",
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "positive_predictive_value",
                        "abbreviation": "ppv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tp": 0,
                                "fp": 0
                            }
                        ],
                        "complement": "fdr",
                        "args": [
                            "tp",
                            "fp"
                        ],
                        "formula": "tp/(tp + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tp/(tp + n - tn)",
                        "synonyms": [
                            "precision"
                        ]
                    },
                    "expression": "tp/(n - tn + tp)",
                    "equation": "ppv - tp/(n - tn + tp)",
                    "equation_polynomial": "ppv*(n - tn + tp) - tp",
                    "function": "positive_predictive_value_standardized"
                },
                {
                    "descriptor": {
                        "name": "balanced_accuracy",
                        "abbreviation": "bacc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "short_args": [
                            "tpr",
                            "tnr"
                        ],
                        "short_formula": "(tpr + tnr)/2",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "tp/(2*p) + tn/(2*n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "tp/(2*p) + tn/(2*n)"
                    },
                    "expression": "tp/(2*p) + tn/(2*n)",
                    "equation": "bacc - tp/(2*p) - tn/(2*n)",
                    "equation_polynomial": "2*bacc*n*p - n*tp - p*tn",
                    "function": "balanced_accuracy_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "n*p*ppv*(2*bacc - 1)/(n*ppv + p*ppv - p)",
                            "tn": "n*(2*bacc*p*ppv - 2*bacc*p + n*ppv)/(n*ppv + p*ppv - p)"
                        },
                        "symbols": {
                            "tp": [
                                "ppv",
                                "bacc",
                                "p",
                                "n"
                            ],
                            "tn": [
                                "ppv",
                                "bacc",
                                "p",
                                "n"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "n*ppv + p*ppv - p",
                            "symbols": [
                                "ppv",
                                "n",
                                "p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "positive_predictive_value",
                        "abbreviation": "ppv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tp": 0,
                                "fp": 0
                            }
                        ],
                        "complement": "fdr",
                        "args": [
                            "tp",
                            "fp"
                        ],
                        "formula": "tp/(tp + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "n"
                        ],
                        "formula_standardized": "tp/(tp + n - tn)",
                        "synonyms": [
                            "precision"
                        ]
                    },
                    "expression": "tp/(n - tn + tp)",
                    "equation": "ppv - tp/(n - tn + tp)",
                    "equation_polynomial": "ppv*(n - tn + tp) - tp",
                    "function": "positive_predictive_value_standardized"
                },
                {
                    "descriptor": {
                        "name": "f1_plus",
                        "abbreviation": "f1p",
                        "lower_bound": 0,
                        "upper_bound": null,
                        "args": [
                            "tp",
                            "fp",
                            "p"
                        ],
                        "formula": "(2*tp) / (tp + p + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(2*tp) / (tp + p + n - tn)",
                        "synonyms": [
                            "f1"
                        ]
                    },
                    "expression": "2*tp/(n + p - tn + tp)",
                    "equation": "f1p - 2*tp/(n + p - tn + tp)",
                    "equation_polynomial": "f1p*(n + p - tn + tp) - 2*tp",
                    "function": "f1_plus_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "-f1p*p*ppv/(f1p - 2*ppv)",
                            "tn": "(f1p*n - f1p*p*ppv + f1p*p - 2*n*ppv)/(f1p - 2*ppv)"
                        },
                        "symbols": {
                            "tp": [
                                "ppv",
                                "p",
                                "f1p"
                            ],
                            "tn": [
                                "ppv",
                                "p",
                                "f1p",
                                "n"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p - 2*ppv",
                            "symbols": [
                                "f1p",
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "negative_predictive_value",
                        "abbreviation": "npv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tn": 0,
                                "fn": 0
                            }
                        ],
                        "complement": "for_",
                        "args": [
                            "tn",
                            "fn"
                        ],
                        "formula": "tn/(tn + fn)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p"
                        ],
                        "formula_standardized": "tn/(tn + p - tp)"
                    },
                    "expression": "tn/(p + tn - tp)",
                    "equation": "npv - tn/(p + tn - tp)",
                    "equation_polynomial": "npv*(p + tn - tp) - tn",
                    "function": "negative_predictive_value_standardized"
                },
                {
                    "descriptor": {
                        "name": "balanced_accuracy",
                        "abbreviation": "bacc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "short_args": [
                            "tpr",
                            "tnr"
                        ],
                        "short_formula": "(tpr + tnr)/2",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "tp/(2*p) + tn/(2*n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "tp/(2*p) + tn/(2*n)"
                    },
                    "expression": "tp/(2*p) + tn/(2*n)",
                    "equation": "bacc - tp/(2*p) - tn/(2*n)",
                    "equation_polynomial": "2*bacc*n*p - n*tp - p*tn",
                    "function": "balanced_accuracy_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "p*(2*bacc*n*npv - 2*bacc*n + npv*p)/(n*npv - n + npv*p)",
                            "tn": "n*npv*p*(2*bacc - 1)/(n*npv - n + npv*p)"
                        },
                        "symbols": {
                            "tp": [
                                "bacc",
                                "p",
                                "n",
                                "npv"
                            ],
                            "tn": [
                                "bacc",
                                "p",
                                "n",
                                "npv"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "n*npv - n + npv*p",
                            "symbols": [
                                "npv",
                                "n",
                                "p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "negative_predictive_value",
                        "abbreviation": "npv",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "nans": [
                            {
                                "tn": 0,
                                "fn": 0
                            }
                        ],
                        "complement": "for_",
                        "args": [
                            "tn",
                            "fn"
                        ],
                        "formula": "tn/(tn + fn)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p"
                        ],
                        "formula_standardized": "tn/(tn + p - tp)"
                    },
                    "expression": "tn/(p + tn - tp)",
                    "equation": "npv - tn/(p + tn - tp)",
                    "equation_polynomial": "npv*(p + tn - tp) - tn",
                    "function": "negative_predictive_value_standardized"
                },
                {
                    "descriptor": {
                        "name": "f1_plus",
                        "abbreviation": "f1p",
                        "lower_bound": 0,
                        "upper_bound": null,
                        "args": [
                            "tp",
                            "fp",
                            "p"
                        ],
                        "formula": "(2*tp) / (tp + p + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(2*tp) / (tp + p + n - tn)",
                        "synonyms": [
                            "f1"
                        ]
                    },
                    "expression": "2*tp/(n + p - tn + tp)",
                    "equation": "f1p - 2*tp/(n + p - tn + tp)",
                    "equation_polynomial": "f1p*(n + p - tn + tp) - 2*tp",
                    "function": "f1_plus_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "f1p*(n*npv - n + 2*npv*p - p)/(f1p + 2*npv - 2)",
                            "tn": "npv*(f1p*n + 2*f1p*p - 2*p)/(f1p + 2*npv - 2)"
                        },
                        "symbols": {
                            "tp": [
                                "p",
                                "f1p",
                                "n",
                                "npv"
                            ],
                            "tn": [
                                "p",
                                "f1p",
                                "n",
                                "npv"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p + 2*npv - 2",
                            "symbols": [
                                "npv",
                                "f1p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                {
                    "descriptor": {
                        "name": "balanced_accuracy",
                        "abbreviation": "bacc",
                        "lower_bound": 0,
                        "upper_bound": 1,
                        "short_args": [
                            "tpr",
                            "tnr"
                        ],
                        "short_formula": "(tpr + tnr)/2",
                        "args": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula": "tp/(2*p) + tn/(2*n)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "tp/(2*p) + tn/(2*n)"
                    },
                    "expression": "tp/(2*p) + tn/(2*n)",
                    "equation": "bacc - tp/(2*p) - tn/(2*n)",
                    "equation_polynomial": "2*bacc*n*p - n*tp - p*tn",
                    "function": "balanced_accuracy_standardized"
                },
                {
                    "descriptor": {
                        "name": "f1_plus",
                        "abbreviation": "f1p",
                        "lower_bound": 0,
                        "upper_bound": null,
                        "args": [
                            "tp",
                            "fp",
                            "p"
                        ],
                        "formula": "(2*tp) / (tp + p + fp)",
                        "args_standardized": [
                            "tp",
                            "tn",
                            "p",
                            "n"
                        ],
                        "formula_standardized": "(2*tp) / (tp + p + n - tn)",
                        "synonyms": [
                            "f1"
                        ]
                    },
                    "expression": "2*tp/(n + p - tn + tp)",
                    "equation": "f1p - 2*tp/(n + p - tn + tp)",
                    "equation_polynomial": "f1p*(n + p - tn + tp) - 2*tp",
                    "function": "f1_plus_standardized"
                }
            ],
            "solutions": [
                {
                    "solution": {
                        "expressions": {
                            "tp": "f1p*p*(2*bacc*n - n - p)/(f1p*n + f1p*p - 2*p)",
                            "tn": "n*(2*bacc*f1p*p - 4*bacc*p + f1p*n + f1p*p)/(f1p*n + f1p*p - 2*p)"
                        },
                        "symbols": {
                            "tp": [
                                "bacc",
                                "p",
                                "f1p",
                                "n"
                            ],
                            "tn": [
                                "bacc",
                                "p",
                                "f1p",
                                "n"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p*n + f1p*p - 2*p",
                            "symbols": [
                                "n",
                                "f1p",
                                "p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        }
    ]
}