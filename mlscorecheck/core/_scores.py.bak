"""
This module implements the calculation of scores
"""

import sympy
import numpy as np

from ._interval import Interval, union

__all__ = ['accuracy',
            'error_rate',
            'sensitivity',
            'specificity',
            'positive_predictive_value',
            'precision',
            'negative_predictive_value',
            'f_beta_plus',
            'f_beta_minus',
            'f1_plus',
            'f1_minus',
            'unified_performance_measure',
            'true_positive_rate',
            'recall',
            'false_positive_rate',
            'false_negative_rate',
            'true_negative_rate',
            'false_discovery_rate',
            'false_omission_rate',
            'geometric_mean',
            'fowlkes_mallows_index',
            'markedness',
            'positive_likelihood_ratio',
            'negative_likelihood_ratio',
            'matthews_correlation_coefficient',
            'informedness',
            'prevalence_threshold',
            'diagnostic_odds_ratio',
            'threat_score',
            'jaccard_index',
            'balanced_accuracy',
            'cohens_kappa',
            'p4',
            'accuracy_standardized',
            'error_rate_standardized',
            'sensitivity_standardized',
            'specificity_standardized',
            'positive_predictive_value_standardized',
            'precision_standardized',
            'negative_predictive_value_standardized',
            'f_beta_plus_standardized',
            'f_beta_minus_standardized',
            'f1_plus_standardized',
            'f1_minus_standardized',
            'unified_performance_measure_standardized',
            'true_positive_rate_standardized',
            'recall_standardized',
            'false_positive_rate_standardized',
            'false_negative_rate_standardized',
            'true_negative_rate_standardized',
            'false_discovery_rate_standardized',
            'false_omission_rate_standardized',
            'geometric_mean_standardized',
            'fowlkes_mallows_index_standardized',
            'markedness_standardized',
            'positive_likelihood_ratio_standardized',
            'negative_likelihood_ratio_standardized',
            'matthews_correlation_coefficient_standardized',
            'informedness_standardized',
            'prevalence_threshold_standardized',
            'diagnostic_odds_ratio_standardized',
            'threat_score_standardized',
            'jaccard_index_standardized',
            'balanced_accuracy_standardized',
            'cohens_kappa_standardized',
            'p4_standardized',
            'score_functions',
            'score_functions_standardized',
            'score_function_aliases',
            'score_function_complementers',
            'sqrt']

def accuracy(*, tp, tn, p, n):
    """
    The accuracy

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return (tp + tn)/(p + n)

def accuracy_standardized(*, tp, tn, p, n):
    """
    The accuracy with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return accuracy(tp=tp, tn=tn, p=p, n=n)

def error_rate(*, fp, fn, p, n):
    """
    The error rate

    Args:
        fp (int/float/np.array/Interval): the number of false positives
        fn (int/float/np.array/Interval): the number of false negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return (fp + fn)/(p + n)

def error_rate_standardized(*, tp, tn, p, n):
    """
    The error_rate with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """

    return error_rate(fp=n-tn, fn=p-tp, p=p, n=n)

def sensitivity(*, tp, p):
    """
    The sensitivity

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        p (int/float/np.array/Interval): the number of positive items

    Returns:
        float/np.array/Interval: the score
    """
    return tp/p

def sensitivity_standardized(*, tp, p):
    """
    The sensitivity with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        p (int/float/np.array/Interval): the number of positives

    Returns:
        float/np.array/Interval: the score
    """

    return sensitivity(tp=tp, p=p)

def specificity(*, tn, n):
    """
    The specificity

    Args:
        tn (int/float/np.array/Interval): the number of true negatives
        n (int/float/np.array/Interval): the number of negative items

    Returns:
        float/np.array/Interval: the score
    """
    return tn/n

def specificity_standardized(*, tn, n):
    """
    The specificity with standardized parameterization

    Args:
        tn (int/float/np.array/Interval): the number of true negatives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return specificity(tn=tn, n=n)

def positive_predictive_value(*, tp, fp):
    """
    The positive predictive value

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        fp (int/float/np.array/Interval): the number of false positives

    Returns:
        float/np.array/Interval: the score
    """
    return tp/(tp + fp)

def positive_predictive_value_standardized(*, tp, tn, n):
    """
    The positive predictive value with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return positive_predictive_value(tp=tp, fp=n-tn)

def precision(*, tp, fp):
    """
    The precision - alias to the positive predictive value

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        fp (int/float/np.array/Interval): the number of false positives

    Returns:
        float/np.array/Interval: the score
    """
    return positive_predictive_value(tp=tp, fp=fp)

def precision_standardized(*, tp, tn, n):
    """
    The precision with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return precision(tp=tp, fp=n-tn)

def negative_predictive_value(*, tn, fn):
    """
    The negative predictive value

    Args:
        tn (int/float/np.array/Interval): the number of true negatives
        fn (int/float/np.array/Interval): the number of false negatives

    Returns:
        float/np.array/Interval: the score
    """
    return tn/(tn + fn)

def negative_predictive_value_standardized(*, tp, tn, p):
    """
    The negative predictive value with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives

    Returns:
        float/np.array/Interval: the score
    """
    return negative_predictive_value(tn=tn, fn=p-tp)

def f_beta_plus(*, tp, fp, p, beta_plus=1):
    """
    The f_beta_plus score

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        fp (int/float/np.array/Interval): the number of false positives
        p (int/float/np.array/Interval): the number of positives
        beta_plus (int/float/np.array/Interval): the beta value

    Returns:
        float/np.array/Interval: the score
    """
    return ((1 + beta_plus**2)*tp) / (tp + beta_plus**2*p + fp)

def f_beta_plus_standardized(*, tp, tn, p, n, beta_plus=1):
    """
    The f beta plus with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives
        beta_plus (int/float): the beta parameter

    Returns:
        float/np.array/Interval: the score
    """
    return f_beta_plus(tp=tp, fp=n-tn, p=p, beta_plus=beta_plus)

def f_beta_minus(*, tn, fn, n, beta_minus=1):
    """
    The f_beta_minus score

    Args:
        tn (int/float/np.array/Interval): the number of true negatives
        fn (int/float/np.array/Interval): the number of false negatives
        n (int/float/np.array/Interval): the number of negatives
        beta_minus (int/float/np.array/Interval): the beta value

    Returns:
        float/np.array/Interval: the score
    """
    return ((1 + beta_minus**2)*tn) / (tn + beta_minus**2*n + fn)

def f_beta_minus_standardized(*, tp, tn, p, n, beta_minus=1):
    """
    The f beta minus with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives
        beta_minus (int/float): the beta parameter

    Returns:
        float/np.array/Interval: the score
    """
    return f_beta_minus(tn=tn, fn=p-tp, n=n, beta_minus=beta_minus)

def f1_plus(*, tp, fp, p):
    """
    The f_1 plus score

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        fp (int/float/np.array/Interval): the number of false positives
        p (int/float/np.array/Interval): the number of positives

    Returns:
        float/np.array/Interval: the score
    """
    return f_beta_plus(tp=tp, fp=fp, p=p, beta_plus=1)

def f1_plus_standardized(*, tp, tn, p, n):
    """
    The f1 plus with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return f1_plus(tp=tp, fp=n-tn, p=p)

def f1_minus(*, tn, fn, n):
    """
    The f_1 minus score

    Args:
        tn (int/float/np.array/Interval): the number of true negatives
        fn (int/float/np.array/Interval): the number of false negatives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return f_beta_minus(tn=tn, fn=fn, n=n, beta_minus=1)

def f1_minus_standardized(*, tp, tn, p, n):
    """
    The f1 minus with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return f1_minus(tn=tn, fn=p-tp, n=n)

def unified_performance_measure(*, tp, tn, p, n):
    """
    The unified performance measure score

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """

    fp = n - tn
    fn = p - tp

    f1p = f1_plus(tp=tp, fp=fp, p=p)
    f1n = f1_minus(tn=tn, fn=fn, n=n)

    return 2 * (f1p * f1n) / (f1p + f1n)

def unified_performance_measure_standardized(*, tp, tn, p, n):
    """
    The unified performance measure with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return unified_performance_measure(tp=tp, tn=tn, p=p, n=n)

def sqrt_sympy_np(object):
    """
    Square root, numeric or symbolic

    Args:
        object: to take the square root of

    Returns:
        object: the square root
    """

    if isinstance(object, sympy.Basic):
        return sympy.sqrt(object)

    if object < 0:
        print('negative square root')
    return np.sqrt(object)

def sqrt(object):
    return np.sqrt(object)

def true_positive_rate(*, tp, p):
    """
    The true negative rate: alias for the sensitivity

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        p (int/float/np.array/Interval): the total number of positives

    Returns:
        float/np.array/Interval: the true positive rate
    """
    return sensitivity(tp=tp, p=p)

def true_positive_rate_standardized(*, tp, p):
    """
    The true positive rate with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        p (int/float/np.array/Interval): the number of positives

    Returns:
        float/np.array/Interval: the score
    """

    return true_positive_rate(tp=tp, p=p)

def recall(*, tp, p):
    """
    The recall: alias for the sensitivity

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        p (int/float/np.array/Interval): the total number of positives

    Returns:
        float/np.array/Interval: the true positive rate
    """
    return sensitivity(tp=tp, p=p)

def recall_standardized(*, tp, p):
    """
    The recall with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        p (int/float/np.array/Interval): the number of positives

    Returns:
        float/np.array/Interval: the score
    """
    return recall(tp=tp, p=p)

def false_positive_rate(*, fp, n):
    """
    The false positive rate

    Args:
        fp (int/float/np.array/Interval): the number of false positives
        n (int/float/np.array/Interval): the total number of negatives

    Returns:
        float/np.array/Interval: the false positive rate
    """
    return fp/n

def false_positive_rate_standardized(*, tn, n):
    """
    The false positive rate with standardized parameterization

    Args:
        tn (int/float/np.array/Interval): the number of true negatives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return false_positive_rate(fp=n-tn, n=n)

def false_negative_rate(*, fn, p):
    """
    The false negative rate

    Args:
        fn (int/float/np.array/Interval): the number of false negatives
        p (int/float/np.array/Interval): the total number of positives

    Returns:
        float/np.array/Interval: the false negative rate
    """
    return fn/p

def false_negative_rate_standardized(*, tp, p):
    """
    The accuracy with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        p (int/float/np.array/Interval): the number of positives

    Returns:
        float/np.array/Interval: the score
    """
    return false_negative_rate(fn=p-tp, p=p)

def true_negative_rate(*, tn, n):
    """
    The true negative rate: alias for specificity

    Args:
        tn (int/float/np.array/Interval): the number of true negatives
        n (int/float/np.array/Interval): the total number of negatives

    Returns:
        float/np.array/Interval: the true negative rate
    """
    return specificity(tn=tn, n=n)

def true_negative_rate_standardized(*, tn, n):
    """
    The true negative rate with standardized parameterization

    Args:
        tn (int/float/np.array/Interval): the number of true negatives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return true_negative_rate(tn=tn, n=n)

def false_discovery_rate(*, tp, fp):
    """
    The false discover rate (1 - ppv)

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        fp (int/float/np.array/Interval): the number of false positives

    Returns:
        float/np.array/Interval: the false discovery rate
    """
    return 1 - positive_predictive_value(tp=tp, fp=fp)

def false_discovery_rate_standardized(*, tp, tn, n):
    """
    The false discovery rate with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """

    return false_discovery_rate(tp=tp, fp=n-tn)

def false_omission_rate(*, tn, fn):
    """
    The false omission rate (1 - npv)

    Args:
        tn (int/float/np.array/Interval): the number of true negatives
        fn (int/float/np.array/Interval): the number of false negatives

    Returns:
        float/np.array/Interval: the false omission rate
    """
    return 1 - negative_predictive_value(tn=tn, fn=fn)

def false_omission_rate_standardized(*, tp, tn, p):
    """
    The false omission rate with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives

    Returns:
        float/np.array/Interval: the score
    """
    return false_omission_rate(tn=tn, fn=p-tp)

def geometric_mean(*, tp, tn, p, n, sqrt=sqrt):
    """
    The geometric mean score

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the geometric mean
    """

    return sqrt(tp)*sqrt(tn) / (sqrt(p)*sqrt(n))

def geometric_mean_standardized(*, tp, tn, p, n, sqrt=sqrt):
    """
    The geometric mean with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives
        sqrt (callable): the square root to be used

    Returns:
        float/np.array/Interval: the score
    """
    return geometric_mean(tp=tp, tn=tn, p=p, n=n, sqrt=sqrt)

def fowlkes_mallows_index(*, tp, fp, p):
    """
    The Fowlkes-Mallows index

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        fp (int/float/np.array/Interval): the number of false positives
        p (int/float/np.array/Interval): the total number of positives

    Returns:
        float/np.array/Interval: the Fowlkes-Mallows index
    """
    ppv = positive_predictive_value(tp=tp, fp=fp)
    tpr = true_positive_rate(tp=tp, p=p)

    return (ppv * tpr)**(1/2)

def fowlkes_mallows_index_standardized(*, tp, tn, p, n):
    """
    The Fowlkes-Mallows index with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return fowlkes_mallows_index(tp=tp, fp=n-tn, p=p)

def markedness(*, tp, tn, p, n):
    """
    The markedness

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the markedness score
    """
    fp = n - tn
    fn = p - tp
    ppv = positive_predictive_value(tp=tp, fp=fp)
    npv = negative_predictive_value(tn=tn, fn=fn)
    return ppv + npv - 1

def markedness_standardized(*, tp, tn, p, n):
    """
    The markedness with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return markedness(tp=tp, tn=tn, p=p, n=n)

def positive_likelihood_ratio(*, tp, fp, p, n):
    """
    The positive likelihood ratio

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        fp (int/float/np.array/Interval): the number of false positives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the postiive likelihood score
    """
    tpr = true_positive_rate(tp=tp, p=p)
    fpr = false_positive_rate(fp=fp, n=n)
    return tpr/fpr

def positive_likelihood_ratio_standardized(*, tp, tn, p, n):
    """
    The positive likelihood ratio with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return positive_likelihood_ratio(tp=tp, fp=n-tn, p=p, n=n)

def negative_likelihood_ratio(*, tn, fn, p, n):
    """
    The negative likelihood ratio

    Args:
        tn (int/float/np.array/Interval): the number of true negatives
        fn (int/float/np.array/Interval): the number of false negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the negative likelihood score
    """
    fnr = false_negative_rate(fn=fn, p=p)
    tnr = true_negative_rate(tn=tn, n=n)

    return fnr/tnr

def negative_likelihood_ratio_standardized(*, tp, tn, p, n):
    """
    The negative likelihood ratio with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return negative_likelihood_ratio(tn=tn, fn=p-tp, p=p, n=n)

def matthews_correlation_coefficient(*, tp, tn, p, n, sqrt=sqrt):
    """
    The Matthew's correlation coefficient

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives
        sqrt (callable): the square root to be used

    Returns:
        float/np.array/Interval: the Matthew's correlation coefficient
    """
    fp = n - tn
    fn = p - tp
    numerator = (tp * tn) - (fp * fn)
    denominator = sqrt((tp + fp)*p*n*(tn + fn))
    return numerator / denominator

def matthews_correlation_coefficient_standardized(*, tp, tn, p, n, sqrt=sqrt):
    """
    The Matthews correlation coefficient with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives
        sqrt (callable): the square root to be used

    Returns:
        float/np.array/Interval: the score
    """
    return matthews_correlation_coefficient(tp=tp, tn=tn, p=p, n=n, sqrt=sqrt)

def informedness(*, tp, tn, p, n):
    """
    The informedness score

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the informedness score
    """
    tpr = true_positive_rate(tp=tp, p=p)
    tnr = true_negative_rate(tn=tn, n=n)
    return tpr + tnr - 1

def informedness_standardized(*, tp, tn, p, n):
    """
    The informedness with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return informedness(tp=tp, tn=tn, p=p, n=n)

def prevalence_threshold(*, tp, fp, p, n, sqrt=sqrt):
    """
    The prevalence score

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        fp (int/float/np.array/Interval): the number of false positives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives
        sqrt (callable): the square root to be used

    Returns:
        float/np.array/Interval: the prevalence threshold score
    """
    tpr = true_positive_rate(tp=tp, p=p)
    fpr = false_positive_rate(fp=fp, n=n)

    return (sqrt(tpr * fpr) - fpr)/(tpr - fpr)

def prevalence_threshold_standardized(*, tp, tn, p, n, sqrt=sqrt):
    """
    The prevalence threshold with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives
        sqrt (callable): the square root to be used

    Returns:
        float/np.array/Interval: the score
    """
    return prevalence_threshold(tp=tp, fp=n-tn, p=p, n=n, sqrt=sqrt)

def diagnostic_odds_ratio(*, tp, tn, p, n):
    """
    The diagnostic odds ratio

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the diagnostic odds ratio
    """
    fp = n - tn
    fn = p - tp

    plr = positive_likelihood_ratio(tp=tp, fp=fp, p=p, n=n)
    nlr = negative_likelihood_ratio(tn=tn, fn=fn, p=p, n=n)
    return plr/nlr

def diagnostic_odds_ratio_standardized(*, tp, tn, p, n):
    """
    The diagnostic odds ratio with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return diagnostic_odds_ratio(tp=tp, tn=tn, p=p, n=n)

def threat_score(*, tp, fp, p):
    """
    The threat score

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        fp (int/float/np.array/Interval): the number of false positives
        p (int/float/np.array/Interval): the number of positives

    Returns:
        float/np.array/Interval: the threat score
    """
    return tp/(fp + p)

def threat_score_standardized(*, tp, tn, p, n):
    """
    The threat score with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return threat_score(tp=tp, fp=n-tn, p=p)

def jaccard_index(*, tp, fp, p):
    """
    The Jaccard index - alias to the threat score

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        fp (int/float/np.array/Interval): the number of false positives
        p (int/float/np.array/Interval): the number of positives

    Returns:
        float/np.array/Interval: the Jaccard index
    """
    return threat_score(tp=tp, fp=fp, p=p)

def jaccard_index_standardized(*, tp, tn, p, n):
    """
    The Jaccard index with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return jaccard_index(tp=tp, fp=n-tn, p=p)

def balanced_accuracy(*, tp, tn, p, n):
    """
    The balanced accuracy

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the balanced accuracy
    """
    tpr = true_positive_rate(tp=tp, p=p)
    tnr = true_negative_rate(tn=tn, n=n)

    return (tpr + tnr)/2.0

def balanced_accuracy_standardized(*, tp, tn, p, n):
    """
    The balanced accuracy with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return balanced_accuracy(tp=tp, tn=tn, p=p, n=n)

def cohens_kappa(*, tp, tn, p, n):
    """
    Cohen's kappa score

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the Cohen's kappa score
    """
    acc = accuracy(tp=tp, tn=tn, p=p, n=n)
    fp = p - tn
    fn = n - tp

    term = ((tp + tn)*(fp + fn)) / (2*(tp*tn - fp*fn))

    return acc/(acc + term)

def cohens_kappa_standardized(*, tp, tn, p, n):
    """
    The Cohen's kappa with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return cohens_kappa(tp=tp, tn=tn, p=p, n=n)

def p4(*, tp, tn, p, n):
    """
    The P4-metric

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the P4 score
    """

    fp = p - tn
    fn = n - tp

    num = (4*tp*tn)
    denom = num + (tp + tn) * (fp + fn)

    return num/denom

def p4_standardized(*, tp, tn, p, n):
    """
    The P4-metric with standardized parameterization

    Args:
        tp (int/float/np.array/Interval): the number of true positives
        tn (int/float/np.array/Interval): the number of true negatives
        p (int/float/np.array/Interval): the number of positives
        n (int/float/np.array/Interval): the number of negatives

    Returns:
        float/np.array/Interval: the score
    """
    return p4(tp=tp, tn=tn, p=p, n=n)

def score_functions():
    """
    Return a set of scores with no aliases

    Returns:
        dict: the scores with no aliases
    """
    return {'acc': accuracy,
            'sens': sensitivity,
            'spec': specificity,
            'npv': negative_predictive_value,
            'ppv': positive_predictive_value,
            'f1_plus': f1_plus,
            'f1_minus': f1_minus,
            'fb_plus': f_beta_plus,
            'fb_minus': f_beta_minus,
            'ba': balanced_accuracy,
            'fm': fowlkes_mallows_index,
            'bm': informedness,
            'pt': prevalence_threshold,
            'lrp': positive_likelihood_ratio,
            'lrn': negative_likelihood_ratio,
            'mk': markedness,
            'dor': diagnostic_odds_ratio,
            'mcc': matthews_correlation_coefficient,
            'ji': jaccard_index,
            'kappa': cohens_kappa,
            'gm': geometric_mean,
            'upm': unified_performance_measure,
            'p4': p4
            }

def score_functions_standardized():
    """
    Return a set of scores with no aliases

    Returns:
        dict: the scores with no aliases
    """
    return {'acc': accuracy_standardized,
            'sens': sensitivity_standardized,
            'spec': specificity_standardized,
            'npv': negative_predictive_value_standardized,
            'ppv': positive_predictive_value_standardized,
            'f1_plus': f1_plus_standardized,
            'f1_minus': f1_minus_standardized,
            'fb_plus': f_beta_plus_standardized,
            'fb_minus': f_beta_minus_standardized,
            'ba': balanced_accuracy_standardized,
            'fm': fowlkes_mallows_index_standardized,
            'bm': informedness_standardized,
            'pt': prevalence_threshold_standardized,
            'lrp': positive_likelihood_ratio_standardized,
            'lrn': negative_likelihood_ratio_standardized,
            'mk': markedness_standardized,
            'dor': diagnostic_odds_ratio_standardized,
            'mcc': matthews_correlation_coefficient_standardized,
            'ji': jaccard_index_standardized,
            'kappa': cohens_kappa_standardized,
            'gm': geometric_mean_standardized,
            'upm': unified_performance_measure_standardized,
            'p4': p4_standardized
            }

def score_function_aliases():
    """
    Returns the alias mapping

    Returns:
        dict: the alias mapping
    """
    return {'tpr': 'sens',
            'tnr': 'spec',
            'prec': 'ppv',
            'rec': 'sens'}

def score_function_complementers():
    """
    Returns the complementer mapping

    Returns:
        dict: the complementer mapping
    """
    return {'fdr': 'ppv',
            'for': 'npv',
            'fnr': 'tpr',
            'fpr': 'tnr',
            'err': 'acc'}

