{
    "solutions": [
        {
            "scores": [
                "acc",
                "sens"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "p*sens",
                            "symbols": [
                                "p",
                                "sens"
                            ]
                        },
                        "tn": {
                            "expression": "acc*n + acc*p - p*sens",
                            "symbols": [
                                "acc",
                                "n",
                                "p",
                                "sens"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "acc",
                "spec"
            ],
            "solutions": [
                {
                    "solution": {
                        "tn": {
                            "expression": "n*spec",
                            "symbols": [
                                "n",
                                "spec"
                            ]
                        },
                        "tp": {
                            "expression": "acc*n + acc*p - n*spec",
                            "symbols": [
                                "acc",
                                "n",
                                "p",
                                "spec"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "acc",
                "ppv"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "(acc*n + acc*p - n)*ppv/(2*ppv - 1)",
                            "symbols": [
                                "acc",
                                "n",
                                "p",
                                "ppv"
                            ]
                        },
                        "tn": {
                            "expression": "(acc*n*ppv + acc*p*ppv - acc*n - acc*p + n*ppv)/(2*ppv - 1)",
                            "symbols": [
                                "acc",
                                "n",
                                "p",
                                "ppv"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "2*ppv - 1",
                            "symbols": [
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "acc",
                "npv"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "(acc*n*npv + acc*npv*p - acc*n - acc*p + npv*p)/(2*npv - 1)",
                            "symbols": [
                                "acc",
                                "n",
                                "npv",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "(acc*n + acc*p - p)*npv/(2*npv - 1)",
                            "symbols": [
                                "acc",
                                "n",
                                "npv",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "2*npv - 1",
                            "symbols": [
                                "npv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "acc",
                "bacc"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "-(acc*n - 2*bacc*n + acc*p)*p/(n - p)",
                            "symbols": [
                                "acc",
                                "bacc",
                                "n",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "(acc*n + acc*p - 2*bacc*p)*n/(n - p)",
                            "symbols": [
                                "acc",
                                "bacc",
                                "n",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "n - p",
                            "symbols": [
                                "n",
                                "p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "acc",
                "f1p"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "1/2*(acc - 1)*f1p*(n + p)/(f1p - 1)",
                            "symbols": [
                                "acc",
                                "f1p",
                                "n",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "1/2*(acc*f1p - 2*acc + f1p)*(n + p)/(f1p - 1)",
                            "symbols": [
                                "acc",
                                "f1p",
                                "n",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p - 1",
                            "symbols": [
                                "f1p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "acc",
                "fm"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "(fm*p + sqrt(-((acc - 1)*n - (fm**2 - acc)*p)*p))*fm",
                            "symbols": [
                                "acc",
                                "fm",
                                "n",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "-fm**2*p + acc*n + acc*p - sqrt(-((acc - 1)*n - (fm**2 - acc)*p)*p)*fm",
                            "symbols": [
                                "acc",
                                "fm",
                                "n",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": [
                        {
                            "expression": "-((acc - 1)*n - (fm**2 - acc)*p)*p",
                            "symbols": [
                                "acc",
                                "fm",
                                "n",
                                "p"
                            ]
                        }
                    ]
                },
                {
                    "solution": {
                        "tp": {
                            "expression": "(fm*p - sqrt(-((acc - 1)*n - (fm**2 - acc)*p)*p))*fm",
                            "symbols": [
                                "acc",
                                "fm",
                                "n",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "-fm**2*p + acc*n + acc*p + sqrt(-((acc - 1)*n - (fm**2 - acc)*p)*p)*fm",
                            "symbols": [
                                "acc",
                                "fm",
                                "n",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": [
                        {
                            "expression": "-((acc - 1)*n - (fm**2 - acc)*p)*p",
                            "symbols": [
                                "acc",
                                "fm",
                                "n",
                                "p"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "scores": [
                "sens",
                "spec"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "p*sens",
                            "symbols": [
                                "p",
                                "sens"
                            ]
                        },
                        "tn": {
                            "expression": "n*spec",
                            "symbols": [
                                "n",
                                "spec"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "sens",
                "ppv"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "p*sens",
                            "symbols": [
                                "p",
                                "sens"
                            ]
                        },
                        "tn": {
                            "expression": "(p*ppv*sens + n*ppv - p*sens)/ppv",
                            "symbols": [
                                "n",
                                "p",
                                "ppv",
                                "sens"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "ppv",
                            "symbols": [
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "sens",
                "npv"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "p*sens",
                            "symbols": [
                                "p",
                                "sens"
                            ]
                        },
                        "tn": {
                            "expression": "npv*p*(sens - 1)/(npv - 1)",
                            "symbols": [
                                "npv",
                                "p",
                                "sens"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "npv - 1",
                            "symbols": [
                                "npv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "sens",
                "bacc"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "p*sens",
                            "symbols": [
                                "p",
                                "sens"
                            ]
                        },
                        "tn": {
                            "expression": "(2*bacc - sens)*n",
                            "symbols": [
                                "bacc",
                                "n",
                                "sens"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "sens",
                "f1p"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "p*sens",
                            "symbols": [
                                "p",
                                "sens"
                            ]
                        },
                        "tn": {
                            "expression": "(f1p*p*sens + f1p*n + f1p*p - 2*p*sens)/f1p",
                            "symbols": [
                                "f1p",
                                "n",
                                "p",
                                "sens"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p",
                            "symbols": [
                                "f1p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "sens",
                "fm"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "p*sens",
                            "symbols": [
                                "p",
                                "sens"
                            ]
                        },
                        "tn": {
                            "expression": "(fm**2*p*sens + fm**2*n - p*sens**2)/fm**2",
                            "symbols": [
                                "fm",
                                "n",
                                "p",
                                "sens"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "fm**2",
                            "symbols": [
                                "fm"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "spec",
                "ppv"
            ],
            "solutions": [
                {
                    "solution": {
                        "tn": {
                            "expression": "n*spec",
                            "symbols": [
                                "n",
                                "spec"
                            ]
                        },
                        "tp": {
                            "expression": "n*ppv*(spec - 1)/(ppv - 1)",
                            "symbols": [
                                "n",
                                "ppv",
                                "spec"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "ppv - 1",
                            "symbols": [
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "spec",
                "npv"
            ],
            "solutions": [
                {
                    "solution": {
                        "tn": {
                            "expression": "n*spec",
                            "symbols": [
                                "n",
                                "spec"
                            ]
                        },
                        "tp": {
                            "expression": "(n*npv*spec + npv*p - n*spec)/npv",
                            "symbols": [
                                "n",
                                "npv",
                                "p",
                                "spec"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "npv",
                            "symbols": [
                                "npv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "spec",
                "bacc"
            ],
            "solutions": [
                {
                    "solution": {
                        "tn": {
                            "expression": "n*spec",
                            "symbols": [
                                "n",
                                "spec"
                            ]
                        },
                        "tp": {
                            "expression": "(2*bacc - spec)*p",
                            "symbols": [
                                "bacc",
                                "p",
                                "spec"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "spec",
                "f1p"
            ],
            "solutions": [
                {
                    "solution": {
                        "tn": {
                            "expression": "n*spec",
                            "symbols": [
                                "n",
                                "spec"
                            ]
                        },
                        "tp": {
                            "expression": "(n*spec - n - p)*f1p/(f1p - 2)",
                            "symbols": [
                                "f1p",
                                "n",
                                "p",
                                "spec"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p - 2",
                            "symbols": [
                                "f1p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "spec",
                "fm"
            ],
            "solutions": [
                {
                    "solution": {
                        "tn": {
                            "expression": "n*spec",
                            "symbols": [
                                "n",
                                "spec"
                            ]
                        },
                        "tp": {
                            "expression": "1/2*(fm*p - sqrt((fm**2*p - 4*n*spec + 4*n)*p))*fm",
                            "symbols": [
                                "fm",
                                "n",
                                "p",
                                "spec"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": [
                        {
                            "expression": "(fm**2*p - 4*n*spec + 4*n)*p",
                            "symbols": [
                                "fm",
                                "n",
                                "p",
                                "spec"
                            ]
                        }
                    ]
                },
                {
                    "solution": {
                        "tn": {
                            "expression": "n*spec",
                            "symbols": [
                                "n",
                                "spec"
                            ]
                        },
                        "tp": {
                            "expression": "1/2*(fm*p + sqrt((fm**2*p - 4*n*spec + 4*n)*p))*fm",
                            "symbols": [
                                "fm",
                                "n",
                                "p",
                                "spec"
                            ]
                        }
                    },
                    "non_zero": [],
                    "non_negative": [
                        {
                            "expression": "(fm**2*p - 4*n*spec + 4*n)*p",
                            "symbols": [
                                "fm",
                                "n",
                                "p",
                                "spec"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "scores": [
                "ppv",
                "npv"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "(n*npv + npv*p - n)*ppv/(npv + ppv - 1)",
                            "symbols": [
                                "n",
                                "npv",
                                "p",
                                "ppv"
                            ]
                        },
                        "tn": {
                            "expression": "(n*ppv + p*ppv - p)*npv/(npv + ppv - 1)",
                            "symbols": [
                                "n",
                                "npv",
                                "p",
                                "ppv"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "npv + ppv - 1",
                            "symbols": [
                                "npv",
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "ppv",
                "bacc"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "(2*bacc - 1)*n*p*ppv/(n*ppv + p*ppv - p)",
                            "symbols": [
                                "bacc",
                                "n",
                                "p",
                                "ppv"
                            ]
                        },
                        "tn": {
                            "expression": "(2*bacc*p*ppv - 2*bacc*p + n*ppv)*n/(n*ppv + p*ppv - p)",
                            "symbols": [
                                "bacc",
                                "n",
                                "p",
                                "ppv"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "n*ppv + p*ppv - p",
                            "symbols": [
                                "n",
                                "p",
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "ppv",
                "f1p"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "-f1p*p*ppv/(f1p - 2*ppv)",
                            "symbols": [
                                "f1p",
                                "n",
                                "p",
                                "ppv"
                            ]
                        },
                        "tn": {
                            "expression": "-(f1p*p*ppv - f1p*n - f1p*p + 2*n*ppv)/(f1p - 2*ppv)",
                            "symbols": [
                                "f1p",
                                "n",
                                "p",
                                "ppv"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p - 2*ppv",
                            "symbols": [
                                "f1p",
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "ppv",
                "fm"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "fm**2*p/ppv",
                            "symbols": [
                                "fm",
                                "n",
                                "p",
                                "ppv"
                            ]
                        },
                        "tn": {
                            "expression": "(fm**2*p*ppv - fm**2*p + n*ppv**2)/ppv**2",
                            "symbols": [
                                "fm",
                                "n",
                                "p",
                                "ppv"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "ppv",
                            "symbols": [
                                "ppv"
                            ]
                        },
                        {
                            "expression": "ppv**2",
                            "symbols": [
                                "ppv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "npv",
                "bacc"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "(2*bacc*n*npv - 2*bacc*n + npv*p)*p/(n*npv + npv*p - n)",
                            "symbols": [
                                "bacc",
                                "n",
                                "npv",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "(2*bacc - 1)*n*npv*p/(n*npv + npv*p - n)",
                            "symbols": [
                                "bacc",
                                "n",
                                "npv",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "n*npv + npv*p - n",
                            "symbols": [
                                "n",
                                "npv",
                                "p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "npv",
                "f1p"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "(n*npv + 2*npv*p - n - p)*f1p/(f1p + 2*npv - 2)",
                            "symbols": [
                                "f1p",
                                "n",
                                "npv",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "(f1p*n + 2*f1p*p - 2*p)*npv/(f1p + 2*npv - 2)",
                            "symbols": [
                                "f1p",
                                "n",
                                "npv",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p + 2*npv - 2",
                            "symbols": [
                                "f1p",
                                "npv"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "npv",
                "fm"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "-1/2*(fm*p + sqrt((4*n*npv**2 - 8*n*npv + (fm**2 + 4*npv**2 - 4*npv)*p + 4*n)*p))*fm/(npv - 1)",
                            "symbols": [
                                "fm",
                                "n",
                                "npv",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "-1/2*(fm**2*p + 2*npv*p + sqrt((4*n*npv**2 - 8*n*npv + (fm**2 + 4*npv**2 - 4*npv)*p + 4*n)*p)*fm - 2*p)*npv/(npv - 1)**2",
                            "symbols": [
                                "fm",
                                "n",
                                "npv",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "(npv - 1)**2",
                            "symbols": [
                                "npv"
                            ]
                        },
                        {
                            "expression": "npv - 1",
                            "symbols": [
                                "npv"
                            ]
                        }
                    ],
                    "non_negative": [
                        {
                            "expression": "(4*n*npv**2 - 8*n*npv + (fm**2 + 4*npv**2 - 4*npv)*p + 4*n)*p",
                            "symbols": [
                                "fm",
                                "n",
                                "npv",
                                "p"
                            ]
                        }
                    ]
                },
                {
                    "solution": {
                        "tp": {
                            "expression": "-1/2*(fm*p - sqrt((4*n*npv**2 - 8*n*npv + (fm**2 + 4*npv**2 - 4*npv)*p + 4*n)*p))*fm/(npv - 1)",
                            "symbols": [
                                "fm",
                                "n",
                                "npv",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "-1/2*(fm**2*p + 2*npv*p - sqrt((4*n*npv**2 - 8*n*npv + (fm**2 + 4*npv**2 - 4*npv)*p + 4*n)*p)*fm - 2*p)*npv/(npv - 1)**2",
                            "symbols": [
                                "fm",
                                "n",
                                "npv",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "(npv - 1)**2",
                            "symbols": [
                                "npv"
                            ]
                        },
                        {
                            "expression": "npv - 1",
                            "symbols": [
                                "npv"
                            ]
                        }
                    ],
                    "non_negative": [
                        {
                            "expression": "(4*n*npv**2 - 8*n*npv + (fm**2 + 4*npv**2 - 4*npv)*p + 4*n)*p",
                            "symbols": [
                                "fm",
                                "n",
                                "npv",
                                "p"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "scores": [
                "bacc",
                "f1p"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "(2*bacc*n - n - p)*f1p*p/(f1p*n + f1p*p - 2*p)",
                            "symbols": [
                                "bacc",
                                "f1p",
                                "n",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "(2*bacc*f1p*p + f1p*n - 4*bacc*p + f1p*p)*n/(f1p*n + f1p*p - 2*p)",
                            "symbols": [
                                "bacc",
                                "f1p",
                                "n",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p*n + f1p*p - 2*p",
                            "symbols": [
                                "f1p",
                                "n",
                                "p"
                            ]
                        }
                    ],
                    "non_negative": []
                }
            ]
        },
        {
            "scores": [
                "bacc",
                "fm"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "1/2*(fm*n + fm*p + sqrt(fm**2*n**2 + fm**2*p**2 + 2*(fm**2 - 4*bacc + 2)*n*p))*fm",
                            "symbols": [
                                "bacc",
                                "fm",
                                "n",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "-1/2*(fm**2*n + fm**2*p - 4*bacc*p + sqrt(fm**2*n**2 + fm**2*p**2 + 2*(fm**2 - 4*bacc + 2)*n*p)*fm)*n/p",
                            "symbols": [
                                "bacc",
                                "fm",
                                "n",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "p",
                            "symbols": [
                                "p"
                            ]
                        }
                    ],
                    "non_negative": [
                        {
                            "expression": "fm**2*n**2 + fm**2*p**2 + 2*(fm**2 - 4*bacc + 2)*n*p",
                            "symbols": [
                                "bacc",
                                "fm",
                                "n",
                                "p"
                            ]
                        }
                    ]
                },
                {
                    "solution": {
                        "tp": {
                            "expression": "1/2*(fm*n + fm*p - sqrt(fm**2*n**2 + fm**2*p**2 + 2*(fm**2 - 4*bacc + 2)*n*p))*fm",
                            "symbols": [
                                "bacc",
                                "fm",
                                "n",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "-1/2*(fm**2*n + fm**2*p - 4*bacc*p - sqrt(fm**2*n**2 + fm**2*p**2 + 2*(fm**2 - 4*bacc + 2)*n*p)*fm)*n/p",
                            "symbols": [
                                "bacc",
                                "fm",
                                "n",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "p",
                            "symbols": [
                                "p"
                            ]
                        }
                    ],
                    "non_negative": [
                        {
                            "expression": "fm**2*n**2 + fm**2*p**2 + 2*(fm**2 - 4*bacc + 2)*n*p",
                            "symbols": [
                                "bacc",
                                "fm",
                                "n",
                                "p"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "scores": [
                "f1p",
                "fm"
            ],
            "solutions": [
                {
                    "solution": {
                        "tp": {
                            "expression": "(fm - sqrt(-f1p**2 + fm**2))*fm*p/f1p",
                            "symbols": [
                                "f1p",
                                "fm",
                                "n",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "(f1p*fm**2*p - sqrt(-f1p**2 + fm**2)*f1p*fm*p + f1p**2*n + f1p**2*p - 2*fm**2*p + 2*sqrt(-f1p**2 + fm**2)*fm*p)/f1p**2",
                            "symbols": [
                                "f1p",
                                "fm",
                                "n",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p",
                            "symbols": [
                                "f1p"
                            ]
                        },
                        {
                            "expression": "f1p**2",
                            "symbols": [
                                "f1p"
                            ]
                        }
                    ],
                    "non_negative": [
                        {
                            "expression": "-f1p**2 + fm**2",
                            "symbols": [
                                "f1p",
                                "fm"
                            ]
                        }
                    ]
                },
                {
                    "solution": {
                        "tp": {
                            "expression": "(fm + sqrt(-f1p**2 + fm**2))*fm*p/f1p",
                            "symbols": [
                                "f1p",
                                "fm",
                                "n",
                                "p"
                            ]
                        },
                        "tn": {
                            "expression": "(f1p*fm**2*p + sqrt(-f1p**2 + fm**2)*f1p*fm*p + f1p**2*n + f1p**2*p - 2*fm**2*p - 2*sqrt(-f1p**2 + fm**2)*fm*p)/f1p**2",
                            "symbols": [
                                "f1p",
                                "fm",
                                "n",
                                "p"
                            ]
                        }
                    },
                    "non_zero": [
                        {
                            "expression": "f1p",
                            "symbols": [
                                "f1p"
                            ]
                        },
                        {
                            "expression": "f1p**2",
                            "symbols": [
                                "f1p"
                            ]
                        }
                    ],
                    "non_negative": [
                        {
                            "expression": "-f1p**2 + fm**2",
                            "symbols": [
                                "f1p",
                                "fm"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}